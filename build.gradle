plugins {
    id 'java'
    id 'java-library'
    id "io.freefair.lombok" version "6.3.0"
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

group 'com.volmit'
version '1.0.0'
def apiVersion = '1.19'
def name = 'Proxy' // Defined in settings.gradle
def main = 'com.volmit.proxy.Proxy'

// ======================== WINDOWS =============================
registerCustomOutputTask('Cyberpwn', 'C://Users/cyberpwn/Documents/development/server/plugins')
registerCustomOutputTask('Psycho', 'C://Dan/MinecraftDevelopment/server/plugins')
registerCustomOutputTask('ArcaneArts', 'C://Users/arcane/Documents/development/server/plugins')
registerCustomOutputTask('Vatuu', 'D://Minecraft/Servers/1.19/plugins')
registerCustomOutputTask('Nowhere', 'E://Desktop/server/plugins')
// ========================== UNIX ==============================
registerCustomOutputTaskUnix('CyberpwnLT', '/Users/danielmills/development/server/plugins')
registerCustomOutputTaskUnix('PsychoLT', '/Users/brianfopiano/Desktop/REMOTES/RemoteMinecraft/plugins')
// ==============================================================

file(jar.archiveFile.get().getAsFile().getParentFile().getParentFile().getParentFile().getAbsolutePath() + '/build/resources/main/plugin.yml').delete()


processResources {
    filesMatching('**/plugin.yml') {
        expand(
                'name': name.toString(),
                'version': version.toString(),
                'main': main.toString(),
                'apiversion': apiVersion.toString()
        )
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
    mavenLocal {
        content {
            includeGroup("org.bukkit")
            includeGroup("org.spigotmc")
        }
    }
    maven { url "https://arcanearts.jfrog.io/artifactory/archives" }
    mavenCentral()
}

/**
 * We need parameter meta for the decree command system
 */
compileJava {
    options.compilerArgs << '-parameters'
}


/**
 * Configure Proxy for shading
 */
shadowJar {
    append("plugin.yml")
    relocate 'art.arcane', 'com.volmit.proxy.util.arcane'
    relocate 'dev.jorel.commandapi', 'com.volmit.proxy.util.commandapi'

    dependencies {
        include(dependency('dev.jorel:commandapi-shade:'))
        include(dependency('art.arcane:'))
    }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 60, 'minutes'
    resolutionStrategy.cacheDynamicVersionsFor 60, 'minutes'
}

dependencies {
    // Provided or Classpath
    implementation 'org.spigotmc:spigot-api:1.19.2-R0.1-SNAPSHOT'

    // Shaded
    implementation 'art.arcane:Curse:22.11.8'
    implementation (name:'spigot-1.19.3', ext:'jar')
}

if (JavaVersion.current().toString() != "17") {
    System.err.println()
    System.err.println("=========================================================================================================")
    System.err.println("You must run gradle on Java 17. You are using " + JavaVersion.current())
    System.err.println()
    System.err.println("=== For IDEs ===")
    System.err.println("1. Configure the project for Java 17")
    System.err.println("2. Configure the bundled gradle to use Java 17 in settings")
    System.err.println()
    System.err.println("=== For Command Line (gradlew) ===")
    System.err.println("1. Install JDK 17 from https://www.oracle.com/java/technologies/javase/jdk17-archive-downloads.html")
    System.err.println("2. Set JAVA_HOME environment variable to the new jdk installation folder such as C:\\Program Files\\Java\\jdk-17.0.1")
    System.err.println("3. Open a new command prompt window to get the new environment variables if need be.")
    System.err.println("=========================================================================================================")
    System.err.println()
    System.exit(69)
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

compileJava {
    options.encoding = "UTF-8"
}


def registerCustomOutputTask(name, path) {
    if (!System.properties['os.name'].toLowerCase().contains('windows')) {
        return
    }

    tasks.register('build' + name, Copy) {
        group('development')
        outputs.upToDateWhen { false }
        dependsOn(shadowJar)
        from(new File(buildDir, "libs/Proxy-" + version + "-all.jar"))
        into(file(path))
        rename { String fileName ->
            fileName.replace("Proxy-" + version + "-all.jar", "Proxy.jar")
        }
    }
}

def registerCustomOutputTaskUnix(name, path) {
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        return
    }

    tasks.register('build' + name, Copy) {
        group('development')
        outputs.upToDateWhen { false }
        dependsOn(shadowJar)
        from(new File(buildDir, "libs/Proxy-" + version + "-all.jar"))
        into(file(path))
        rename { String fileName ->
            fileName.replace("Proxy-" + version + "-all.jar", "Proxy.jar")
        }
    }
}
